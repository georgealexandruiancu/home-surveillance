import RPi.GPIO as GPIO
import time
from gpiozero import Buzzer
#Libraries
import RPi.GPIO as GPIO
import time
from gpiozero import Buzzer

#GPIO Mode (BOARD / BCM)
GPIO.setmode(GPIO.BCM)

#set GPIO Pins
GPIO_TRIGGER = 18
GPIO_ECHO = 24

# change these as desired - they're the pins connected from the
# SPI port on the ADC to the Cobbler
SPICLK = 18
SPIMISO = 23
SPIMOSI = 24
SPICS = 25
mq2_dpin = 26
mq2_apin = 0

buzzer = Buzzer(21)

#set GPIO direction (IN / OUT)
GPIO.setup(GPIO_TRIGGER, GPIO.OUT)
GPIO.setup(GPIO_ECHO, GPIO.IN)
 
def distance():
    # set Trigger to HIGH
    GPIO.output(GPIO_TRIGGER, True)
 
    # set Trigger after 0.01ms to LOW
    time.sleep(0.00001)
    GPIO.output(GPIO_TRIGGER, False)
 
    StartTime = time.time()
    StopTime = time.time()
 
    # save StartTime
    while GPIO.input(GPIO_ECHO) == 0:
        StartTime = time.time()
 
    # save time of arrival
    while GPIO.input(GPIO_ECHO) == 1:
        StopTime = time.time()
 
    # time difference between start and arrival
    TimeElapsed = StopTime - StartTime
    # multiply with the sonic speed (34300 cm/s)
    # and divide by 2, because there and back
    distance = (TimeElapsed * 34300) / 2
    if(distance <= 200):
       buzzer.on()
       time.sleep(0.1)
       buzzer.off()
    return distance

def GasDensity():
         GPIO.setwarnings(False)
         GPIO.cleanup()			#clean up at the end of your script
         GPIO.setmode(GPIO.BCM)		#to specify whilch pin numbering system
         # set up the SPI interface pins
         GPIO.setup(SPIMOSI, GPIO.OUT)
         GPIO.setup(SPIMISO, GPIO.IN)
         GPIO.setup(SPICLK, GPIO.OUT)
         GPIO.setup(SPICS, GPIO.OUT)
         GPIO.setup(mq2_dpin,GPIO.IN,pull_up_down=GPIO.PUD_DOWN)

        #read SPI data from MCP3008(or MCP3204) chip,8 possible adc's (0 thru 7)
	def readadc(adcnum, clockpin, mosipin, misopin, cspin):
	        if ((adcnum > 7) or (adcnum < 0)):
	                return -1
	        GPIO.output(cspin, True)	
	
	        GPIO.output(clockpin, False)  # start clock low
	        GPIO.output(cspin, False)     # bring CS low
	
	        commandout = adcnum
	        commandout |= 0x18  # start bit + single-ended bit
	        commandout <<= 3    # we only need to send 5 bits here
	        for i in range(5):
	                if (commandout & 0x80):
	                        GPIO.output(mosipin, True)
	                else:
	                        GPIO.output(mosipin, False)
	                commandout <<= 1
	                GPIO.output(clockpin, True)
	                GPIO.output(clockpin, False)
	
	        adcout = 0
	        # read in one empty bit, one null bit and 10 ADC bits
	        for i in range(12):
	                GPIO.output(clockpin, True)
	                GPIO.output(clockpin, False)
	                adcout <<= 1
	                if (GPIO.input(misopin)):
	                        adcout |= 0x1
	
	        GPIO.output(cspin, True)
	        
	        adcout >>= 1       # first bit is 'null' so drop it
                return adcout

if __name__ == '__main__':
    try:
        while True:
	    GasLevel=readadc(mq2_apin, SPICLK, SPIMOSI, SPIMISO, SPICS)
                  if GPIO.input(mq2_dpin):
                           print("Gas not leak")
                           time.sleep(0.5)
                  else:
                           print("Gas leakage")
                           print"Current Gas AD vaule = " +str("%.2f"%((GasLevel/1024.)))+" V"
			   print"Current Gas density is:" +str("%.2f"%((GasLevel/1024.)*125))+" %"
                           time.sleep(0.5)

            dist = distance()
            print ("Measured Distance = %.1f cm" % dist)
            time.sleep(0.3)
 
        # Reset by pressing CTRL + C
    except KeyboardInterrupt:
        print("Measurement stopped by User")
        GPIO.cleanup()